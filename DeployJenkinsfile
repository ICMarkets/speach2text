#!groovy

/*
* Jenkins shared library
*/
@Library('utils@v1.0.1') _
@Library('ecs-jenkins-lib@v1.0.0') awsECS
@Library('DevOps') ops

def registerTaskDefinition(taskFamily, taskName, memoryReservation, redisHost, image, tag, containerPort, region) {
    return sh(returnStatus: true, script: """
                            /usr/local/bin/aws ecs register-task-definition --network-mode bridge \
                            --family ${taskFamily} \
                            --container-definitions '[{"name":"${taskName}", \
                                                    "image":"${image}", \
                                                     "memoryReservation": ${memoryReservation},"environment":[{"name":"REDIS_DB_HOST", "value": "${redisHost}","logConfiguration": {"logDriver": "fluentd", "options": {"tag": "${tag}"}},"portMappings":[{"containerPort":${containerPort}, "protocol":"tcp"}]}]' --region "${region}"
                            
                        """)
}

pipeline {
    agent any

    // Parameters to be passed
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev'], description: 'Choose an environment.')
        choice(name: 'REDIS_HOST', choices: ['dev-registration-redis.icmarkets.com'], description: 'Choose redis host.')

    }

    // Pipeline options
    options {
        timeout(time: 1, unit: 'HOURS')
        ansiColor('xterm')
    }

    // Environment specific parameters to be used throughout the pipeline
    environment {

        // Application specific parameters
        APPLICATION = "speach2text"
        AWS_VERSION = "${env.TAG}"
        BRANCH = "${helper.parseBranchFromTag("${env.AWS_VERSION}")}"

        // Platform on which application needs to be deployed;
        boolean IS_DEV_ENV = "${params.ENVIRONMENT}".contains("dev")

        CLUSTER_NAME="icm-${params.ENVIRONMENT}-cluster"
        SERVICE_NAME="icm-${params.ENVIRONMENT}-${env.APPLICATION}-service"
        TASK_FAMILY="icm-${params.ENVIRONMENT}-${env.APPLICATION}-td"
        ECS_IMAGE_TO_DEPLOY = "${env.ICM_ECR_REPO_URL}/${APPLICATION}:${env.AWS_VERSION}"

        // dev config
        VPC = "vpc-bb8321d3"
        ALB_HTTP_LISTENER_ARN = "arn:aws:elasticloadbalancing:eu-west-2:466803351965:listener/app/icm-dev-lb/02aa38573ac93bed/2c8b1efb4e0c4dc2"
        ALB_HTTPS_LISTENER_ARN = "arn:aws:elasticloadbalancing:eu-west-2:466803351965:listener/app/icm-dev-lb/02aa38573ac93bed/f777b76b6ff73aae"
        SITE_HOST = "${env.ENVIRONMENT}-speach2text.icmarkets.com".toLowerCase()
        TARGET_GROUP = "icm-${env.ENVIRONMENT}-speach2text-${env.BRANCH}"
    }

    // Pipeline Stages
    stages {

        // Clean Jenkins workspace
        stage('Clean workspace') {
            steps {
                script {
                    log.info("Executing Stage 1: Clean workspace")

                    /* Logic starts here */

                    cleanWs()

                    /* Logic ends here */

                    log.success("Completed Stage 1: Clean workspace")
                }
            }
        }

        //Deploy to dev
        stage('Deploy') {
            steps {
                script {
                    log.info("Executing Stage 2: Deploy")

                    /* Logic starts here */

                    if (env.IS_DEV_ENV == "true") {

                        def service = "icm-${env.ENVIRONMENT}-speach2text-${env.BRANCH}-svc"
                        def taskFamily = "icm-${env.ENVIRONMENT}-speach2text-${env.BRANCH}"
                        def taskName = "icm-speach2text-${env.BRANCH}"

                        def isServiceExists = awsHelper.isECSServiceExists("${env.CLUSTER_NAME}", service, "${env.ICM_AWS_DEFAULT_REGION}")

                        if (isServiceExists == 0) {
                            log.info("Service already exists, No need to create stack.")
                            log.info("Deploying now...")
                            ecs.deploy("${env.CLUSTER_NAME}", service, taskFamily, "${env.ECS_IMAGE_TO_DEPLOY}", "${env.ICM_AWS_DEFAULT_REGION}", true)
                        } else {
                            log.info("New branch setup: Creating task definition now")

                            def isTaskDefCreated = registerTaskDefinition(taskFamily, taskName,
                                    128,"${params.REDIS_HOST}", "${env.ECS_IMAGE_TO_DEPLOY}", "speach2text", 8080, "${env.ICM_AWS_DEFAULT_REGION}")

                            if (isTaskDefCreated != 0) {
                                currentBuild.result = 'FAILED'
                                error("Error while creating TaskDefinition.")
                            }

                            log.success("TaskDefinition created successfully.")
                            log.info("Creating TargetGroup now.")

                            def tgArn = awsHelper.createTargetGroup("${env.TARGET_GROUP}", "${env.VPC}", 80,
                                    "/health", 15, 2, 2, 200, "${env.ICM_AWS_DEFAULT_REGION}")

                            if (tgArn == "") {
                                currentBuild.result = 'FAILED'
                                error("Error while creating TargetGroup.")
                            }

                            log.success("TargetGroup created successfully.")
                            log.info("Modifying TG attributes")

                            def isModifiedTgAttr = awsHelper.modifyTargetGroupAttr("${tgArn}", 30, "${env.ICM_AWS_DEFAULT_REGION}")
                            if (isModifiedTgAttr != 0) {
                                currentBuild.result = 'FAILED'
                                error("Error while modifying TargetGroup attributes.")
                            }

                            log.success("TargetGroup attributes modified successfully.")
                            log.info("Creating LB listener now.")

                            def priority = awsHelper.getNextALBRulePriority("${env.ALB_HTTP_LISTENER_ARN}", "${env.ICM_AWS_DEFAULT_REGION}")

                            def isListenerRuleCreated = awsHelper.createALBListenerRule("${env.ALB_HTTP_LISTENER_ARN}", "${priority}", "${env.SITE_HOST}", "${tgArn}", "${env.ICM_AWS_DEFAULT_REGION}")

                            if (isListenerRuleCreated != 0) {
                                currentBuild.result = 'FAILED'
                                error("Error while creating LB HTTP listener.")
                            }

                            isListenerRuleCreated = awsHelper.createALBListenerRule("${env.ALB_HTTPS_LISTENER_ARN}", "${priority}", "${env.SITE_HOST}", "${tgArn}", "${env.ICM_AWS_DEFAULT_REGION}")

                            if (isListenerRuleCreated != 0) {
                                currentBuild.result = 'FAILED'
                                error("Error while creating LB HTTPS listener.")
                            }

                            log.success("LB listener created successfully.")
                            log.info("Creating service now.")

                            def isServiceCreated = awsHelper.createECSService(service, "${env.CLUSTER_NAME}", taskFamily,
                                    1, "${tgArn}", taskName, 8080, "${env.ICM_AWS_DEFAULT_REGION}")

                            if (isServiceCreated != 0) {
                                currentBuild.result = 'FAILED'
                                error("Error while creating service. Marking the status of build FAILED.")
                            }
                            log.success("Service created successfully. Waiting for service to be stable.")
                            ecs.wait("${env.CLUSTER_NAME}", service, "${env.ICM_AWS_DEFAULT_REGION}")
                        }
                        log.success("Deployment completed for global audience")
                        log.success("Completed Stage 2: Deploy")
                    } else {
                        log.info("No platform selected, Skipping deploy.")
                    }
                }
            }
        }

    }

    // Post actions
    post {
        aborted {
            script {
                log.info("###############################")
                log.info('Build process is aborted')
                helper.notifySlack("warning", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was aborted.")
                log.info("###############################")
            }
        }
        failure {
            script {
                log.error("#############################")
                log.error('Build process failed.')
                helper.notifySlack("danger", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was failed.")
                log.error("#############################")
            }
        }
        success {
            script {
                log.success("#################################################")
                log.success('Build process completed successfully.')
                log.success("#################################################")
                if (env.IS_DEV_ENV == "true") {
                    log.success("Endpoint: ${env.SITE_HOST}")
                    helper.notifySlack("good", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was successful.\n URL: ${env.SITE_HOST}")
                    log.success("#################################################")
                } else {
                    helper.notifySlack("good", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was successful.")
                }
            }
        }
    }
}
